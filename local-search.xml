<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>python转javascript学习笔记（一）</title>
    <link href="/2024/06/18/python%E8%BD%ACjavascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2024/06/18/python%E8%BD%ACjavascript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h1><h2 id="语言规范"><a href="#语言规范" class="headerlink" title="语言规范"></a>语言规范</h2><p>JavaScript语言遵循ECMAScript规范（简称ES），ECMA即欧洲计算机协会，该规范定义了JavaScript（以下统一使用js缩写）语言的核心特性，确保不同环境下的js实现（比如浏览器内置js引擎、Nodejs、其他服务器端js运行时等）的一致性和互操作性。ES6或ES2015（2015年6月发行）是该规范发行以来的一个重要里程碑，也是主流浏览器基本支持的版本。</p><h2 id="特性和应用场景"><a href="#特性和应用场景" class="headerlink" title="特性和应用场景"></a>特性和应用场景</h2><ol><li>基于原型的面向对象语言，在动态修改和扩展对象上更加灵活（弱化了结构和可维护性）。</li></ol><ul><li>与传统的面向对象编程范式（Java&#x2F;C++&#x2F;C#等）的主要区别：<ul><li>创建机制：创建对象时，无需定义类模板，通过从对已有对象的克隆或引用创建；</li><li>继承机制：直接从原型对象继承属性和方法，通过原型链实现；</li><li>方法共享：所有继承自原型的对象共享同一个方法的引用，减少内存使用。</li></ul></li></ul><ol start="2"><li>动态弱类型语言<br>不需要显式声明对象类型（可使用var关键字），并且可在运行时修改对象类型（比如将一个对象从数字改成字符串），类型转换是隐式的。</li></ol><ul><li>动态vs静态：静态类型语言指代码在编译时检测变量类型，从而避免可能的类型错误，典型语言如C、C++、Java、C#；动态类型语言则是在运行时才检查变量的类型，意味着你可以随时改变变量的类型，代价是降低了程序的稳定性和安全性，代表性语言Python、Ruby、Javascript和PHP。</li><li>弱类型vs强类型：强类型语言中，变量的类型在定义和检查时都比较严格，一旦赋予类型，不支持隐式地类型转换（自动转换），如果要转换，必须显式转换，典型例子：Java、C# 和 Rust；弱类型语言中，类型检查较为宽松，可以进行变量类型自动转换（隐式转换），比如数字和字符串可以相互转换，或者布尔值可以转换为数字，典型例子：早期Javascript和Visual Basic。<ul><li>许多现代编程语言（如 TypeScript 或 Python 3）都在向更强类型的方向发展，即使它们传统上被认为是弱类型或动态类型的。这些语言通过引入类型注解、静态类型检查工具或其他机制来增强类型安全性，同时保持了一定程度的灵活性。</li></ul></li></ul><h2 id="主要功能和应用"><a href="#主要功能和应用" class="headerlink" title="主要功能和应用"></a>主要功能和应用</h2><p>了解js语言的功能和用途有助于掌握js语言的能力边界，在实际解决问题的过程中更好地选用语言、框架、技术栈，提升开发效率、降低开发难度。</p><ol><li><strong>web（前段）开发</strong><ul><li><strong>动态网页</strong>：JavaScript可以用来创建交互式的网页元素，如下拉菜单、弹出窗口、表单验证等。<blockquote><p>为什么可以使用js实现交互式动态网页？<br>js运行在浏览器端，借助浏览器DOM操作实现对网页元素的访问和修改；通过事件处理机制实现对用户操作的监听和响应；通过AJAX异步请求等方式和服务器端进行通信，访问后端数据等。</p></blockquote></li><li><strong>DOM操作</strong>：JavaScript可以动态地修改HTML文档中的内容和样式，从而实现页面的实时更新。</li><li><strong>AJAX</strong>：通过异步数据请求，JavaScript可以实现在不刷新整个页面的情况下更新部分内容，提升用户体验。</li><li><strong>框架和库</strong>：如React、Angular和Vue.js等前端框架，它们基于JavaScript，用于构建复杂的Web应用程序。</li></ul></li><li><strong>服务器端开发</strong>：<ul><li><strong>Node.js</strong>：使开发者能够使用JavaScript进行服务器端编程，从而实现全栈JavaScript开发。</li><li><strong>数据库操作</strong>：通过Node.js，JavaScript可以与各种数据库（如MongoDB、MySQL）进行交互，实现数据存储和检索。</li></ul></li><li><strong>游戏开发</strong>：<ul><li><strong>Canvas API</strong>：用于创建2D图形和动画，常用于浏览器游戏开发。</li><li><strong>WebGL</strong>：用于3D图形渲染，使得复杂的游戏和可视化应用成为可能。</li></ul></li><li><strong>移动应用开发</strong>：<ul><li><strong>React Native</strong>、<strong>Ionic</strong>和<strong>Cordova</strong>等框架允许使用JavaScript开发跨平台的移动应用。</li></ul></li><li><strong>桌面应用程序</strong>：<ul><li><strong>Electron</strong>框架使得使用Web技术（HTML、CSS和JavaScript）开发跨平台的桌面应用程序成为可能。</li></ul></li><li><strong>物联网（IoT）</strong>：<ul><li><strong>Node-RED</strong>：一个基于Node.js的流媒体处理工具，用于构建物联网应用的数据流网络。</li></ul></li><li><strong>数据可视化</strong>：<ul><li><strong>D3.js</strong>等库可以帮助开发者从数据中创建复杂的可视化图表和图形。</li></ul></li><li><strong>自动化任务</strong>：<ul><li>使用Node.js，JavaScript可以编写自动化脚本来执行服务器管理、文件操作、构建过程等任务。</li></ul></li><li><strong>机器学习</strong>：<ul><li><strong>TensorFlow.js</strong>：允许在浏览器或Node.js环境中执行机器学习模型。</li></ul></li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>vscode（编辑器），Nodejs（解释运行），google浏览器开发者工具（自带js引擎，调试）</p><h2 id="命名习惯"><a href="#命名习惯" class="headerlink" title="命名习惯"></a>命名习惯</h2><ul><li>变量：驼峰命名法</li><li>常量：全大写，下划线间隔</li><li>函数：动词在前，驼峰命名法</li><li>文件名：全小写，下划线间隔</li></ul><h2 id="教程参考"><a href="#教程参考" class="headerlink" title="教程参考"></a>教程参考</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/JavaScript_basics">JavaScript 基础 - 学习 Web 开发 | MDN (mozilla.org)</a></li><li><a href="https://www.byhy.net/web/js/01/">Javascript 简介 - 白月黑羽 (byhy.net)</a></li></ul><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>如果你和我一样平时使用python较多，那么以下知识点你可能需要关注一下。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><blockquote><p>let和var关键字区别<br>在JavaScript中，<code>let</code> 和 <code>var</code> 都用于声明变量，但它们之间有几个重要的区别：</p></blockquote><ol><li><p><strong>作用域</strong>:</p><ul><li><code>var</code> 声明的变量具有函数作用域或全局作用域。这意味着在一个函数内部声明的变量在整个函数内部都是可见的，而在函数外部声明的变量则在整个脚本或全局范围内可见。</li><li><code>let</code> 声明的变量具有块级作用域。这意味着变量仅在其被声明的代码块（由 <code>&#123;&#125;</code> 包围的区域，如循环或条件语句）内可见。</li></ul></li><li><p><strong>变量提升 (Hoisting)</strong>:</p><ul><li><code>var</code> 声明的变量会被提升至作用域的顶部，即在函数或全局作用域的最开始处声明，尽管实际声明可能出现在作用域内的任何位置。</li><li><code>let</code> 声明的变量不会被提升。变量必须在使用之前声明，否则会抛出引用错误。</li></ul></li><li><p><strong>重复声明</strong>:</p><ul><li>使用 <code>var</code> 可以在同一作用域内多次声明同一个变量名，后一个声明会覆盖前一个。</li><li>使用 <code>let</code> 在同一作用域内不允许重复声明同一个变量名，尝试这样做会导致语法错误。</li></ul></li><li><p><strong>暂时性死区 (Temporal Dead Zone)</strong>:</p><ul><li><code>var</code> 声明的变量在提升之后就可以访问，尽管访问时值为 <code>undefined</code>。</li><li><code>let</code> 声明的变量在声明之前访问会抛出错误，这是因为变量存在于暂时性死区中直到其声明点。</li></ul></li><li><p><strong>全局属性</strong>:</p><ul><li>如果在全局作用域中使用 <code>var</code> 声明变量，该变量会自动成为全局对象（通常是 <code>window</code> 对象在浏览器环境中）的属性。</li><li>使用 <code>let</code> 在全局作用域声明的变量不会成为全局对象的属性。</li></ul></li></ol><p>总结来说，<code>let</code> 提供了更严格的变量管理，增强了代码的可预测性和维护性。因此，现代JavaScript编码实践中通常推荐使用 <code>let</code> 而不是 <code>var</code>。同时，随着ES6的普及，<code>const</code> 也被广泛用于声明不可变的常量。</p><h3 id="字符串-引号"><a href="#字符串-引号" class="headerlink" title="字符串 引号"></a>字符串 引号</h3><p>js中的字符串可以用单引号、双引号、反引号，以下定义都可以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27;字符串&#x27;</span><br><span class="hljs-string">&quot;字符串&quot;</span><br><span class="hljs-string">`字符串`</span><br></code></pre></td></tr></table></figure><h3 id="逻辑操作"><a href="#逻辑操作" class="headerlink" title="逻辑操作"></a>逻辑操作</h3><p>松散相等比较和严格相等比较</p><ul><li>严格相等比较：<code>1===1</code>返回true， <code>1===&#39;1&#39;</code>返回false</li><li>松散相等比较：<code>1==&#39;1&#39;</code>返回true，在比较时会尝试转化为同种类型进行比较<br>不相等同理。</li></ul><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>我们看到的js中通过字面量语法创建的对象和python中的字典类型在形式上有些相似，都是键值对的组合，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> student&#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>，<br><span class="hljs-attr">age</span>: <span class="hljs-number">23</span><br>&#125;<br></code></pre></td></tr></table></figure><p>并且js中的对象也支持通过<code>[]</code>访问对象的属性：<code>student[&#39;name&#39;]</code>，但两者在很多细节上存在一些关键区别：</p><ol><li><p><strong>语法差异</strong>:</p><ul><li>在JavaScript中，对象通常使用<strong>字面量</strong>语法定义，例如 <code>&#123;key: value&#125;</code> ，或通过构造函数 <code>new Object()</code> 创建。</li><li>在Python中，字典使用花括号 <code>&#123;&#125;</code> 并且键值对之间用冒号 <code>:</code> 分隔。</li></ul></li><li><p><strong>属性访问</strong>:</p><ul><li>JavaScript中，对象的属性可以通过点符号 <code>.</code> 或方括号 <code>[]</code> 访问，例如 <code>obj.key</code> 或 <code>obj[&#39;key&#39;]</code>（适合属性名中有空格等特殊字符、属性名为变量的情况）。</li><li>Python中，字典的元素只能通过方括号访问，例如 <code>dict[&#39;key&#39;]</code>。你不能使用点符号访问字典元素。</li></ul></li><li><p><strong>动态属性</strong>:</p><ul><li>JavaScript对象允许动态添加属性，即可以在运行时向对象添加新的键值对。</li><li>Python字典同样支持动态添加键值对。</li></ul></li><li><p><strong>原型继承</strong>:<br>JavaScript对象基于原型继承，这意味着一个对象可以从另一个对象继承属性和方法。这使得JavaScript对象具有层次结构和动态性。</p><ul><li>Python字典没有这样的原型链概念，它们只包含自己的键值对，并不从其他字典继承任何东西。</li></ul></li><li><p><strong>内置方法和功能</strong>:</p><ul><li>JavaScript对象和Python字典都有一系列内置的方法用于操作数据，但具体的方法可能不同。</li><li>例如，JavaScript中的 <code>hasOwnProperty</code>, <code>keys</code>, <code>values</code>, 和 <code>entries</code> 方法，以及Python中的 <code>keys()</code>, <code>values()</code>, <code>items()</code>, 和 <code>get()</code> 方法等。</li></ul></li><li><p><strong>用途和上下文</strong>:</p><ul><li>JavaScript对象常用于面向对象编程（OOP），并可以作为类的实例。</li><li>Python字典更常用作数据结构，用于存储和检索复杂的数据关联。</li></ul></li><li><p><strong>性能和优化</strong>:</p><ul><li>JavaScript引擎通常会对对象的属性访问进行优化，例如V8引擎的内联缓存。</li><li>Python字典的性能取决于Python解释器的实现，如CPython，它使用哈希表来实现字典，这通常提供了快速的查找时间。</li></ul></li></ol><p>这些差异反映了两种语言的设计哲学和目标，JavaScript更多地被设计为一种用于Web的脚本语言，而Python则是一种通用的、高级的编程语言。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ad-note">title: 哪些数据类型是对象？哪些不是对象？<br>- 对象是基于键值对的无序集合，其中的键（也称为属性名）是字符串，而值可以是任意数据类型，包括函数（作为方法）、其他对象、原始类型（如数字、字符串、布尔值）等。<br>- 对象是属性和方法的集合，属性用于描述对象状态，方法是封装在对象中的函数，用于执行操作或算法。两者都可以通过`.`或`[]`访问，但调用方法需要加`()`。<br>- ==函数本身也是一种对象，因为函数拥有name和desc属性==。<br>- <br>- 非对象：<br>- **基本数据类型（Primitive Types）**：包括 `number`、`string`、`boolean`、`undefined` 和 `null`。这些类型不是对象，它们是不可变的值。<br>    <br>- **Symbol**：ES6 引入的 Symbol 类型也不是对象，它用于创建唯一的键，常用于对象属性名。<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ad-note">title: 如何创建对象？<br>- **字面量形式创建的对象**：可以直接使用大括号 `&#123;&#125;` 来定义一个对象，其中可以包含各种属性和方法。<br>    <br>    ```js<br>    const obj = &#123; key: &#x27;value&#x27;, method: function() &#123; /* ... */ &#125; &#125;;<br></code></pre></td></tr></table></figure><ul><li><p><strong>通过构造函数创建的对象</strong>：可以使用函数作为构造器，通过 <code>new</code> 关键字来创建对象实例。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Alice&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p><strong>使用 <code>Object.create()</code> 方法</strong>：可以指定一个原型对象，创建的新对象将继承原型对象的属性和方法。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">const</span> prototype = &#123; <span class="hljs-attr">method</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">/* ... */</span> &#125; &#125;;<br><span class="hljs-keyword">const</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(prototype);<br></code></pre></td></tr></table></figure></li><li><p><strong>类（Class）</strong>：ES6 引入了类语法，提供了一种更清晰的方式来定义对象和继承。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">const</span> animal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&#x27;Lion&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li><p><strong>内置对象</strong>：JavaScript 提供了许多内置对象，如 <code>Array</code>、<code>Date</code>、<code>Function</code>、<code>Math</code>、<code>String</code> 等，它们都是对象。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br><br>### 原型和原型链<br><br>原型和原型链理解js面向对象和继承机制的核心，是实现对象间属性和方法共享的基础。<br><br>每个JavaScript对象，除了`null`，都有一个内部属性`Prototype`，它引用了另一个对象。这个被引用的对象就是当前对象的原型。<br>JavaScript的继承机制是基于原型的，这意味着每个对象都有一个原型（除了`null`），并且可以通过原型链访问属性和方法。<br>#### 继承机制<br>- 原型继承<br><br>当试图访问一个对象的属性或方法时，如果该对象本身不包含所查找的属性或方法，JavaScript引擎会沿着原型链向上查找，直到找到该属性或方法，或者到达原型链的末端。<br><br>- 默认继承<br><br>即使你不显式地设置一个对象的原型，它也会自动继承自`Object.prototype`，这是所有对象共享的基本原型，包含了如`toString`、`valueOf`等基本方法。<br><br>```js<br>const obj = &#123;&#125;<span class="hljs-comment">;</span><br>console.log(obj.toString())<span class="hljs-comment">; // &quot;[object Object]&quot;</span><br></code></pre></td></tr></table></figure></li></ul><p>在这个例子中，<code>obj</code>对象没有显式地设置原型，但它仍然可以调用<code>toString</code>方法，这是因为<code>toString</code>方法存在于<code>Object.prototype</code>上，<code>obj</code>隐式地继承了这个方法。</p><h4 id="原型链好处——属性和方法共享"><a href="#原型链好处——属性和方法共享" class="headerlink" title="原型链好处——属性和方法共享"></a>原型链好处——属性和方法共享</h4><p>原型属性是属于该原型链的所有对象共享的，节约了内存，避免了重复定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ad-attention">即使先创建对象，再给其原型添加属性，已经创建的对象也具有后添加的属性。<br></code></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>遍历对象时，除了可以使用<code>for...in...</code>语法，还有一种<code>for...of...</code>语法。<br>两者区别：<br><code>for...of</code>循环用于遍历可迭代（Iterable）对象，如数组、字符串、Map、Set等。它按照元素的顺序访问每个元素的值，而不是键或索引。这对于需要访问集合中元素的实际值的场景非常有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fruits = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;cherry&#x27;</span>]; <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> fruit <span class="hljs-keyword">of</span> fruits) &#123; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fruit); <br>&#125;<br></code></pre></td></tr></table></figure><p><code>for...in</code>循环则用于枚举一个对象的所有可枚举属性的键。这在遍历对象的属性时非常有用，但它返回的是属性名，而不是属性值。对于数组来说，它会遍历数组的索引，包括稀疏数组中的未定义项以及继承的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>, <span class="hljs-attr">city</span>: <span class="hljs-string">&#x27;New York&#x27;</span> &#125;; <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> prop <span class="hljs-keyword">in</span> person) &#123; <br><span class="hljs-keyword">if</span> (person.<span class="hljs-title function_">hasOwnProperty</span>(prop)) &#123; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;prop&#125;</span>: <span class="hljs-subst">$&#123;person[prop]&#125;</span>`</span>); <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>剩余参数语法可以将一个不定数量的参数表示为一个数组，用<code>...</code>表示。相当于python中的可变参数列表<code>*args</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fruitInfo = &#123;<br><span class="hljs-string">&#x27;apple&#x27;</span> : <span class="hljs-number">4</span>,<br><span class="hljs-string">&#x27;banana&#x27;</span>: <span class="hljs-number">10</span>,<br><span class="hljs-string">&#x27;peach&#x27;</span>: <span class="hljs-number">6</span>,<br><span class="hljs-string">&#x27;watermelon&#x27;</span>: <span class="hljs-number">3</span>,<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printFruitInfo</span>(<span class="hljs-params">...fruits</span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> fruit <span class="hljs-keyword">of</span> fruits)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`fruit: <span class="hljs-subst">$&#123;fruit&#125;</span>, num: <span class="hljs-subst">$&#123;fruitInfo[fruit]&#125;</span>`</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">//调用函数</span><br><span class="hljs-title function_">printFruitInfo</span>(<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;peach&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上述代码使用python表示时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">fruit_info = &#123; <span class="hljs-string">&#x27;apple&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;banana&#x27;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&#x27;peach&#x27;</span>: <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;watermelon&#x27;</span>: <span class="hljs-number">3</span>, &#125; <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_fruit_info</span>(<span class="hljs-params">*fruits</span>): <br><span class="hljs-keyword">for</span> fruit <span class="hljs-keyword">in</span> fruits: <br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;fruit: <span class="hljs-subst">&#123;fruit&#125;</span>, num: <span class="hljs-subst">&#123;fruit_info[fruit]&#125;</span>&quot;</span>) <br><span class="hljs-comment"># 调用函数 </span><br>print_fruit_info(<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;peach&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="单线程异步编程"><a href="#单线程异步编程" class="headerlink" title="单线程异步编程"></a>单线程异步编程</h3><p>js最初设计被用于进行web开发，通过事件处理机制来对用户事件进行监听和响应，js引擎使用异步架构。<br>在js中，异步（Asynchronous）编程是一种允许你的程序在等待某些耗时操作（如网络请求、文件读写、定时器、数据库查询等）完成的同时，继续执行其他任务的编程模式。异步编程是JavaScript处理并发和I&#x2F;O密集型操作的关键特性，它使得Web应用程序能够保持响应性和性能。</p><p>与之相对的是同步（Synchronous）编程，其中程序会按顺序执行每一行代码，如果遇到耗时操作，程序会停下来等待这个操作完成，然后再继续执行下一行代码。这在单线程环境中（如JavaScript在浏览器中的执行环境）会导致阻塞，降低用户体验，尤其是在处理长时间运行的任务时。</p><p>JavaScript使用事件循环（Event Loop）机制来支持异步编程。事件循环检查是否有待处理的事件或回调函数，如果有，就将它们加入到执行队列中，然后在当前任务完成后按顺序执行这些任务。这意味着，即使你的代码中包含了一些耗时操作，js引擎也不会停止执行其他代码，而是将这些耗时操作委托给操作系统或者其他线程去处理，一旦这些操作完成，再通过回调函数、Promise、async&#x2F;await等方式通知主执行线程。</p><p>需要注意的是，js从设计之初就是一个单线程语言，即使看上去回调函数和主程序在并发执行，但其实都运行在一个主线程中。这种单线程异步编程方式的优点在于：</p><ul><li>不需要考虑线程同步和资源竞争；</li><li>从源头上避免了线程间的切换，降低线程自身开销；</li></ul><h4 id="常见的异步编程方式"><a href="#常见的异步编程方式" class="headerlink" title="常见的异步编程方式"></a>常见的异步编程方式</h4><ol><li><p><strong>回调函数（Callback）</strong>：将一个函数作为参数传递到另一个函数中，并在另一个函数中调用，这个函数就是回调函数（两个条件，外部调用，内部定义）。回调函数需要预先定义好，在发起异步操作时，同时提供一个回调函数，当异步操作完成时调用这个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//setTimeout模仿异步操作，两秒后调用回调函数callback</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchData</span>(<span class="hljs-params">callback</span>) &#123; <br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123; <br><span class="hljs-keyword">const</span> data = <span class="hljs-string">&#x27;Hello from the server!&#x27;</span>; <br><span class="hljs-title function_">callback</span>(data); <br>&#125;, <span class="hljs-number">2000</span>); <br>&#125;<br><span class="hljs-title function_">fetchData</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data); <br>&#125;);<br></code></pre></td></tr></table></figure><p>回调函数缺点：当需要依次执行多个异步操作时，容易陷入回调地狱。</p></li><li><p><strong>Promise</strong>：一种更为现代的处理异步操作的方法，允许以<strong>链式</strong>调用的方式处理异步操作的结果，通过链式调用避免层层嵌套，提升可读性。js中的fetch API就是一个很好的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;https://jsonplaceholder.typicode.com/posts/1&quot;</span>)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>)=&gt;</span>response.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">json</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json);<br>&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function">(<span class="hljs-params">error</span>)=&gt;</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error);<br>&#125;)<br><span class="hljs-title function_">finally</span>(<span class="hljs-function">()=&gt;</span>&#123;<br><span class="hljs-title function_">stopLoadingAnimation</span>();              <span class="hljs-comment">//类似try-catch-finally结构</span><br>&#125;);<br><br></code></pre></td></tr></table></figure><p>Promise是ES6中引入的用于简化异步编程的构造。Promise对象代表一个最终可能完成或失败的异步操作，它有三种状态：pending（等待中）、fulfilled（已完成）和rejected（已拒绝）。<br>从字面理解<code>Promise</code>——承诺会在未来某个时刻返回数据，异步函数可以理解为返回值为Promise对象的函数。</p></li><li><p><strong>Async&#x2F;Await</strong>：基于Promise的语法糖（不改变实际功能，但提升程序可读性），使异步代码看起来更像同步代码，提高了代码的可读性和可维护性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;  <span class="hljs-comment">//使用async关键字将函数标记为异步函数</span><br><span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://&quot;</span>) <span class="hljs-comment">//使用await代替then </span><br><span class="hljs-keyword">const</span> json = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(json);<br>&#125;  <br><span class="hljs-title function_">f</span>(); <br></code></pre></td></tr></table></figure><p>异步编程虽然增加了代码的复杂性，但它是构建高性能、高响应性的现代Web应用所必需的。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>javascript, python, 单线程, 异步</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天气数据下载与解析</title>
    <link href="/2024/06/10/%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E4%B8%8E%E8%A7%A3%E6%9E%90/"/>
    <url>/2024/06/10/%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E4%B8%8E%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>最近在做一个项目，需要搭建一个天气数据服务，考察了诸多天气网站API之后，综合考量选择了使用Herbie数据库进行天气预测数据的下载，顺手记录一下使用Herbie库、pygrib等库进行数据下载、解析的使用方法。</p><h1 id="如何下载"><a href="#如何下载" class="headerlink" title="如何下载"></a>如何下载</h1><h2 id="Herbie库"><a href="#Herbie库" class="headerlink" title="Herbie库"></a>Herbie库</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://herbie.readthedocs.io/en/stable/">Herbie</a>是一个Python软件包，通过该库可以使用简单的几行命令下载最新的和历史的数值天气预报（NWP）模型输出，这些数据来源于不同的云存储档案，NWP数据是以GRIB2格式分发的，可以通过xarray（cfgrib）或者pygrib包读取。Herbie库极大地简化了访问和处理复杂NWP模型数据的过程，使得研究人员和开发者能够更高效地探索和使用这些数据。</p><h3 id="环境安装和配置"><a href="#环境安装和配置" class="headerlink" title="环境安装和配置"></a>环境安装和配置</h3><p>Herbie库支持Xarray访问数据，依赖python3.9+版本，建议使用conda构建一个python3.9的虚拟环境，安装Anaconda的步骤不再赘述。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#构建python3.9虚拟环境， conda版本 4.10.1</span><br>conda create --name &lt;your_virtual_env&gt; python=<span class="hljs-number">3.9</span><br>conda env <span class="hljs-built_in">list</span><br>conda activate &lt;your_virtual_env&gt;<br>conda install -c conda-forge herbie-data<br></code></pre></td></tr></table></figure><p>Herbie库安装成功后，会生成一个默认的配置文件，位于<code>~/.config/herbie/config.toml</code><br>内容如下：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment"># Herbie defaults</span><br><br><span class="hljs-section">[default]</span><br><span class="hljs-attr">model</span> = <span class="hljs-string">&quot;hrrr&quot;</span>   <span class="hljs-comment">#使用模型</span><br><span class="hljs-attr">fxx</span> = <span class="hljs-number">0</span>  <span class="hljs-comment">#预测时效性</span><br><span class="hljs-attr">save_dir</span> = <span class="hljs-string">&quot;path_to_your_save_dir&quot;</span>  <span class="hljs-comment">#下载的grib2文件保存路径</span><br><span class="hljs-attr">overwrite</span> = <span class="hljs-literal">false</span>  <span class="hljs-comment">#为false表示如果本地已存在模型文件，则不重复下载</span><br><span class="hljs-attr">verbose</span> = <span class="hljs-literal">true</span>  <span class="hljs-comment">#下载时打印详细信息</span><br><br><span class="hljs-comment"># =============================================================================</span><br><span class="hljs-comment"># You can set the priority order for checking data sources.</span><br><span class="hljs-comment"># If you don&#x27;t specify a default priority, Herbie will check each source in the</span><br><span class="hljs-comment"># order listed in the model template file. Beware: setting a default priority</span><br><span class="hljs-comment"># might prevent you from checking all available sources.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#priority = [&#x27;aws&#x27;, &#x27;nomads&#x27;, &#x27;google&#x27;, &#x27;azure&#x27;, &#x27;etc.&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="数值天气预报模型"><a href="#数值天气预报模型" class="headerlink" title="数值天气预报模型"></a>数值天气预报模型</h3><p>通过Herbie可以下载来自不同天气预报模型的数据，目前主要使用过其中三种：</p><ul><li>HRRR高分辨率快速刷新模型：专注于美国本土及其近海区域的短期预报，如果需要全球范围的天气预报数据，就不要考虑该模型了；</li><li>ECMWF欧洲中期天气预报中心模型：精度高，模型数据文件大（超过1GB），下载较慢，更新时效也慢一些；</li><li>GFS全球预报系统模型：由美国国家海洋和大气管理局 (NOAA) 运营，是一个全球范围内的天气预报模型，更新较快，下载也快一些。gfs模型下载的文件名格式形如：<code>gfs.t06z.pgrb2.0p25.f024</code><ul><li>gfs: 表示这是来自GFS模型的数据。</li><li>.t06z: 表示数据是从UTC（世界协调时间）06:00开始的预报周期。</li><li>.pgrb2: 表示数据是以GRIB2格式编码的。GRIB（GRIdded Binary，网格二进制）是一种广泛使用的气象数据交换格式，GRIB2是其更新版本。</li><li>.0p25: 表示数据的空间分辨率是0.25度经纬度网格，也就是约28公里左右的网格间距。</li><li>.f024: 表示这是从预报周期开始后的第24小时的预报数据。GFS通常会生成长达16天（384小时）的预报。</li></ul></li></ul><h3 id="下载最新的数据"><a href="#下载最新的数据" class="headerlink" title="下载最新的数据"></a>下载最新的数据</h3><p>Herbie库在请求天气预报模型数据时，默认使用协调世界时（Coordinated Universal Time, UTC）作为时间标准。Herbie中的天气预报模型包含四个预测周期，UTC时间每日的00:00、6:00、12:00、18:00，换算成北京时间需要加上8个小时。<br>下载最新预测天气数据可以使用如下代码，该代码会自动从最近的预测周期开始查找预测数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#以下载预测时效为24小时的gfs模型数据为例，其他模型注意更换参数</span><br>H = HerbieLatest(model=<span class="hljs-string">&quot;gfs&quot;</span>, product=<span class="hljs-string">&quot;pgrb2.0p25&quot;</span>, fxx=<span class="hljs-number">24</span>)<br>H.Download(verbose=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(H.Date) <span class="hljs-comment">#获取预测时间</span><br></code></pre></td></tr></table></figure><h1 id="如何解析"><a href="#如何解析" class="headerlink" title="如何解析"></a>如何解析</h1><p>下载天气数据均为<a href="https://herbie.readthedocs.io/en/stable/user_guide/background/grib2.html">grib2</a>文件，官方给出了两个解析工具——cfgrib和pygrib。安装命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">conda install -c conda-forge pygrib cfgrib<br></code></pre></td></tr></table></figure><p>两者都是用于处理GRIB2格式气象数据的Python库，但它们在使用方式、依赖关系和返回数据的形式上有所区别：</p><h2 id="cfgrib"><a href="#cfgrib" class="headerlink" title="cfgrib"></a>cfgrib</h2><ul><li><strong>依赖关系</strong>：<code>cfgrib</code>是<code>xarray</code>库的一个依赖，用于直接读取GRIB数据到<code>xarray.Dataset</code>对象。这意味着它充分利用了<code>xarray</code>强大的多维数据处理能力，适合那些熟悉<code>xarray</code>或需要进行高级数据分析的用户。</li><li><strong>使用方式</strong>：使用<code>cfgrib</code>通常通过<code>xarray.open_dataset()</code>函数，指定GRIB文件路径或URL，以及引擎为<code>cfgrib</code>。例如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xarray <span class="hljs-keyword">as</span> xr<br><span class="hljs-keyword">with</span> xr.open_dataset(grib2_path, engine=<span class="hljs-string">&#x27;cfgrib&#x27;</span>,<br>                     backend_kwargs=&#123;<span class="hljs-string">&#x27;filter_by_keys&#x27;</span>: &#123;<span class="hljs-string">&#x27;stepType&#x27;</span>: <span class="hljs-string">&#x27;accum&#x27;</span>, <span class="hljs-string">&#x27;typeOfLevel&#x27;</span>: <span class="hljs-string">&#x27;surface&#x27;</span>&#125;&#125;) <span class="hljs-keyword">as</span> ds:<br>    <span class="hljs-comment"># 打印所有变量名称</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Variables in the GRIB2 file:&quot;</span>)<br>    <span class="hljs-keyword">for</span> var_name <span class="hljs-keyword">in</span> ds.data_vars:<br>       <span class="hljs-built_in">print</span>(var_name)<br>    <span class="hljs-comment"># 打印具体变量的数值和经纬度</span><br>    tp = ds[<span class="hljs-string">&#x27;tp&#x27;</span>] <span class="hljs-comment">#tp是变量名，表示总降水量</span><br>    <span class="hljs-built_in">print</span>(tp.shape)<br>    <span class="hljs-built_in">print</span>(tp.values)<br>    <span class="hljs-built_in">print</span>(tp.latitude.values)<br>    <span class="hljs-built_in">print</span>(tp.longitude.values)<br></code></pre></td></tr></table></figure></li><li><strong>返回数据形式</strong>：<code>cfgrib</code>返回的是一个<code>xarray.Dataset</code>对象，其中包含了多个<code>xarray.DataArray</code>。每个<code>DataArray</code>对应GRIB文件中的一个变量，包含数据值、坐标（时间和空间维度）以及元数据（如单位、描述等）。这种数据结构非常适合进行数组运算、筛选、切片和复杂的数据分析。</li></ul><h2 id="pygrib"><a href="#pygrib" class="headerlink" title="pygrib"></a><a href="https://jswhit.github.io/pygrib/api.html">pygrib</a></h2><ul><li><strong>依赖关系</strong>：<code>pygrib</code>是一个独立的库，直接基于ECMWF的GRIB API，不需要<code>xarray</code>作为基础。它主要用于直接读取和操作GRIB2文件中的数据。</li><li><strong>使用方式</strong>：使用<code>pygrib</code>首先需要打开GRIB文件，然后逐条读取或选择特定的记录。例如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygrib<br>grbs = pygrib.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;path/to/file.grib2&#x27;</span>)<br><span class="hljs-keyword">for</span> grb <span class="hljs-keyword">in</span> grbs:<br>    <span class="hljs-built_in">print</span>(grb.name, grb.shortName, grb.typeOfLevel, grb.stepType)<br>data, lats, lons = grb.data(), grb.latlons()<br>grbs.close()<br></code></pre></td></tr></table></figure></li><li><strong>返回数据形式</strong>：<code>pygrib</code>处理单个GRIB记录时，通常会返回数据值（如一个NumPy数组），以及通过单独调用获得的地理坐标信息（如经纬度网格）。这意味着，相比<code>cfgrib</code>，它返回的数据形式更基础，需要用户自己处理数据的结构化和后续分析。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>gis</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
