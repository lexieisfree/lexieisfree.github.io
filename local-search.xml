<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>天气数据下载与解析</title>
    <link href="/2024/06/10/%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E4%B8%8E%E8%A7%A3%E6%9E%90/"/>
    <url>/2024/06/10/%E5%A4%A9%E6%B0%94%E6%95%B0%E6%8D%AE%E4%B8%8B%E8%BD%BD%E4%B8%8E%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>最近在做一个项目，需要搭建一个天气数据服务，考察了诸多天气网站API之后，综合考量选择了使用Herbie数据库进行天气预测数据的下载，顺手记录一下使用Herbie库、pygrib等库进行数据下载、解析的使用方法。</p><h1 id="如何下载"><a href="#如何下载" class="headerlink" title="如何下载"></a>如何下载</h1><h2 id="Herbie库"><a href="#Herbie库" class="headerlink" title="Herbie库"></a>Herbie库</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><a href="https://herbie.readthedocs.io/en/stable/">Herbie</a>)是一个Python软件包，通过该库可以使用简单的几行命令下载最新的和历史的数值天气预报（NWP）模型输出，这些数据来源于不同的云存储档案，NWP数据是以GRIB2格式分发的，可以通过xarray（cfgrib）或者pygrib包读取。Herbie库极大地简化了访问和处理复杂NWP模型数据的过程，使得研究人员和开发者能够更高效地探索和使用这些数据。</p><h3 id="环境安装和配置"><a href="#环境安装和配置" class="headerlink" title="环境安装和配置"></a>环境安装和配置</h3><p>Herbie库支持Xarray访问数据，依赖python3.9+版本，建议使用conda构建一个python3.9的虚拟环境，安装Anaconda的步骤不再赘述。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#构建python3.9虚拟环境， conda版本 4.10.1</span><br>conda create --name &lt;your_virtual_env&gt; python=<span class="hljs-number">3.9</span><br>conda env <span class="hljs-built_in">list</span><br>conda activate &lt;your_virtual_env&gt;<br>conda install -c conda-forge herbie-data<br></code></pre></td></tr></table></figure><p>Herbie库安装成功后，会生成一个默认的配置文件，位于<code>~/.config/herbie/config.toml</code><br>内容如下：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs toml"><span class="hljs-comment"># Herbie defaults</span><br><br><span class="hljs-section">[default]</span><br><span class="hljs-attr">model</span> = <span class="hljs-string">&quot;hrrr&quot;</span>   <span class="hljs-comment">#使用模型</span><br><span class="hljs-attr">fxx</span> = <span class="hljs-number">0</span>  <span class="hljs-comment">#预测时效性</span><br><span class="hljs-attr">save_dir</span> = <span class="hljs-string">&quot;path_to_your_save_dir&quot;</span>  <span class="hljs-comment">#下载的grib2文件保存路径</span><br><span class="hljs-attr">overwrite</span> = <span class="hljs-literal">false</span>  <span class="hljs-comment">#为false表示如果本地已存在模型文件，则不重复下载</span><br><span class="hljs-attr">verbose</span> = <span class="hljs-literal">true</span>  <span class="hljs-comment">#下载时打印详细信息</span><br><br><span class="hljs-comment"># =============================================================================</span><br><span class="hljs-comment"># You can set the priority order for checking data sources.</span><br><span class="hljs-comment"># If you don&#x27;t specify a default priority, Herbie will check each source in the</span><br><span class="hljs-comment"># order listed in the model template file. Beware: setting a default priority</span><br><span class="hljs-comment"># might prevent you from checking all available sources.</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#priority = [&#x27;aws&#x27;, &#x27;nomads&#x27;, &#x27;google&#x27;, &#x27;azure&#x27;, &#x27;etc.&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="数值天气预报模型"><a href="#数值天气预报模型" class="headerlink" title="数值天气预报模型"></a>数值天气预报模型</h3><p>通过Herbie可以下载来自不同天气预报模型的数据，目前主要使用过其中三种：</p><ul><li>HRRR高分辨率快速刷新模型：专注于美国本土及其近海区域的短期预报，如果需要全球范围的天气预报数据，就不要考虑该模型了；</li><li>ECMWF欧洲中期天气预报中心模型：精度高，模型数据文件大（超过1GB），下载较慢，更新时效也慢一些；</li><li>GFS全球预报系统模型：由美国国家海洋和大气管理局 (NOAA) 运营，是一个全球范围内的天气预报模型，更新较快，下载也快一些。gfs模型下载的文件名格式形如：<code>gfs.t06z.pgrb2.0p25.f024</code><ul><li>gfs: 表示这是来自GFS模型的数据。</li><li>.t06z: 表示数据是从UTC（世界协调时间）06:00开始的预报周期。</li><li>.pgrb2: 表示数据是以GRIB2格式编码的。GRIB（GRIdded Binary，网格二进制）是一种广泛使用的气象数据交换格式，GRIB2是其更新版本。</li><li>.0p25: 表示数据的空间分辨率是0.25度经纬度网格，也就是约28公里左右的网格间距。</li><li>.f024: 表示这是从预报周期开始后的第24小时的预报数据。GFS通常会生成长达16天（384小时）的预报。</li></ul></li></ul><h3 id="下载最新的数据"><a href="#下载最新的数据" class="headerlink" title="下载最新的数据"></a>下载最新的数据</h3><p>Herbie库在请求天气预报模型数据时，默认使用协调世界时（Coordinated Universal Time, UTC）作为时间标准。Herbie中的天气预报模型包含四个预测周期，UTC时间每日的00:00、6:00、12:00、18:00，换算成北京时间需要加上8个小时。<br>下载最新预测天气数据可以使用如下代码，该代码会自动从最近的预测周期开始查找预测数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#以下载预测时效为24小时的gfs模型数据为例，其他模型注意更换参数</span><br>H = HerbieLatest(model=<span class="hljs-string">&quot;gfs&quot;</span>, product=<span class="hljs-string">&quot;pgrb2.0p25&quot;</span>, fxx=<span class="hljs-number">24</span>)<br>H.Download(verbose=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(H.Date) <span class="hljs-comment">#获取预测时间</span><br></code></pre></td></tr></table></figure><h1 id="如何解析"><a href="#如何解析" class="headerlink" title="如何解析"></a>如何解析</h1><p>下载天气数据均为<a href="https://herbie.readthedocs.io/en/stable/user_guide/background/grib2.html">grib2</a>文件，官方给出了两个解析工具——cfgrib和pygrib。安装命令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">conda install -c conda-forge pygrib cfgrib<br></code></pre></td></tr></table></figure><p>两者都是用于处理GRIB2格式气象数据的Python库，但它们在使用方式、依赖关系和返回数据的形式上有所区别：</p><h2 id="cfgrib"><a href="#cfgrib" class="headerlink" title="cfgrib"></a>cfgrib</h2><ul><li><strong>依赖关系</strong>：<code>cfgrib</code>是<code>xarray</code>库的一个依赖，用于直接读取GRIB数据到<code>xarray.Dataset</code>对象。这意味着它充分利用了<code>xarray</code>强大的多维数据处理能力，适合那些熟悉<code>xarray</code>或需要进行高级数据分析的用户。</li><li><strong>使用方式</strong>：使用<code>cfgrib</code>通常通过<code>xarray.open_dataset()</code>函数，指定GRIB文件路径或URL，以及引擎为<code>cfgrib</code>。例如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xarray <span class="hljs-keyword">as</span> xr<br><span class="hljs-keyword">with</span> xr.open_dataset(grib2_path, engine=<span class="hljs-string">&#x27;cfgrib&#x27;</span>,<br>                     backend_kwargs=&#123;<span class="hljs-string">&#x27;filter_by_keys&#x27;</span>: &#123;<span class="hljs-string">&#x27;stepType&#x27;</span>: <span class="hljs-string">&#x27;accum&#x27;</span>, <span class="hljs-string">&#x27;typeOfLevel&#x27;</span>: <span class="hljs-string">&#x27;surface&#x27;</span>&#125;&#125;) <span class="hljs-keyword">as</span> ds:<br>    <span class="hljs-comment"># 打印所有变量名称</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Variables in the GRIB2 file:&quot;</span>)<br>    <span class="hljs-keyword">for</span> var_name <span class="hljs-keyword">in</span> ds.data_vars:<br>       <span class="hljs-built_in">print</span>(var_name)<br>    <span class="hljs-comment"># 打印具体变量的数值和经纬度</span><br>    tp = ds[<span class="hljs-string">&#x27;tp&#x27;</span>] <span class="hljs-comment">#tp是变量名，表示总降水量</span><br>    <span class="hljs-built_in">print</span>(tp.shape)<br>    <span class="hljs-built_in">print</span>(tp.values)<br>    <span class="hljs-built_in">print</span>(tp.latitude.values)<br>    <span class="hljs-built_in">print</span>(tp.longitude.values)<br></code></pre></td></tr></table></figure></li><li><strong>返回数据形式</strong>：<code>cfgrib</code>返回的是一个<code>xarray.Dataset</code>对象，其中包含了多个<code>xarray.DataArray</code>。每个<code>DataArray</code>对应GRIB文件中的一个变量，包含数据值、坐标（时间和空间维度）以及元数据（如单位、描述等）。这种数据结构非常适合进行数组运算、筛选、切片和复杂的数据分析。</li></ul><h2 id="pygrib"><a href="#pygrib" class="headerlink" title="pygrib"></a><a href="https://jswhit.github.io/pygrib/api.html">pygrib</a></h2><ul><li><strong>依赖关系</strong>：<code>pygrib</code>是一个独立的库，直接基于ECMWF的GRIB API，不需要<code>xarray</code>作为基础。它主要用于直接读取和操作GRIB2文件中的数据。</li><li><strong>使用方式</strong>：使用<code>pygrib</code>首先需要打开GRIB文件，然后逐条读取或选择特定的记录。例如：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygrib<br>grbs = pygrib.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;path/to/file.grib2&#x27;</span>)<br><span class="hljs-keyword">for</span> grb <span class="hljs-keyword">in</span> grbs:<br>    <span class="hljs-built_in">print</span>(grb.name, grb.shortName, grb.typeOfLevel, grb.stepType)<br>data, lats, lons = grb.data(), grb.latlons()<br>grbs.close()<br></code></pre></td></tr></table></figure></li><li><strong>返回数据形式</strong>：<code>pygrib</code>处理单个GRIB记录时，通常会返回数据值（如一个NumPy数组），以及通过单独调用获得的地理坐标信息（如经纬度网格）。这意味着，相比<code>cfgrib</code>，它返回的数据形式更基础，需要用户自己处理数据的结构化和后续分析。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>gis</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
